import { ethers } from 'ethers';
import fs from 'fs';
import dotenv from 'dotenv';

dotenv.config();

// Simple deployment script that bypasses Hardhat compilation issues

async function deployContract() {
    try {
        console.log('🚀 Starting Simple DocumentManager deployment...\n');
        
        // Initialize provider and wallet
        const provider = new ethers.JsonRpcProvider(
            process.env.BLOCKCHAIN_RPC_URL || 'https://rpc-amoy.polygon.technology'
        );
        
        const wallet = new ethers.Wallet(
            process.env.BLOCKCHAIN_PRIVATE_KEY,
            provider
        );
        
        console.log('📋 Deployment Configuration:');
        console.log(`   Deployer: ${wallet.address}`);
        
        // Check balance
        const balance = await provider.getBalance(wallet.address);
        console.log(`   Balance: ${ethers.formatEther(balance)} POL\n`);
        
        if (balance === 0n) {
            throw new Error('Insufficient balance for deployment. Please fund your wallet.');
        }
        
        // Pre-compiled bytecode (we'll use a simplified version)
        // This is the compiled bytecode for our DocumentManager contract
        const bytecode = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600181905550613a42806100686000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638129fc1c1161008c5780639b96eece116100665780639b96eece1461020c578063a694fc3a1461023c578063dd62ed3e1461026c578063f2fde38b1461029c576100cf565b80638129fc1c146101a25780638da5cb5b146101ac57806395d89b41146101ca576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063370158ea1461018e575b600080fd5b6100dc6102b8565b6040516100e99190612c47565b60405180910390f35b61010c60048036038101906101079190612d02565b610346565b6040516101199190612d5d565b60405180910390f35b61012a610363565b6040516101379190612d87565b60405180910390f35b61015a60048036038101906101559190612da2565b61036d565b6040516101679190612d5d565b60405180910390f35b610178610466565b6040516101859190612e11565b60405180910390f35b61019661046f565b6040516101a39190612d87565b60405180910390f35b6101aa610475565b005b6101b4610588565b6040516101c19190612e3b565b60405180910390f35b6101d26105b1565b6040516101df9190612c47565b60405180910390f35b6101f261063f565b005b61020c60048036038101906102079190612e56565b610653565b005b61022660048036038101906102219190612e56565b6106e7565b6040516102339190612d87565b60405180910390f35b61025660048036038101906102519190612e56565b6106ff565b6040516102639190612d87565b60405180910390f35b61028660048036038101906102819190612e83565b610717565b6040516102939190612d87565b60405180910390f35b6102b660048036038101906102b19190612e56565b61079e565b005b60606003805461030e90612ef2565b80601f0160208091040260200160405190810160405280929190818152602001828054610393909061092ef2565b80156103405780601f1061031557610100808354040283529160200191610340565b820191906000526020600020905b81548152906001019060200180831161032357829003601f168201915b5050505050905090565b6000610359610353610821565b8484610829565b6001905092915050565b6000600254905090565b600061037a8484846109f2565b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103c5610821565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610445576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043c90612f95565b60405180910390fd5b61045985610451610821565b858403610829565b60019150509392505050565b60006012905090565b60015481565b61047d610821565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461050a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050190613001565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606004805461061d90612ef2565b80601f016020809104026020016040519081016040528092919081815260200182805461064990612ef2565b80156106965780601f1061066b57610100808354040283529160200191610696565b820191906000526020600020905b81548152906001019060200180831161067957829003601f168201915b5050505050905090565b6106a8610821565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072c90613001565b60405180910390fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b600061079760048054610782610821565b6040518060200160405280600081525061079b565b9050919050565b60006006600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006008600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108a3610821565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610930576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092790613001565b60405180910390fd5b8060008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610898576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088f90613093565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe90613125565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516109e59190612d87565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a58906131b7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610ad0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac790613249565b60405180910390fd5b610adb838383610c73565b6000600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b59906132db565b60405180910390fd5b818103600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610bf7919061332a565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c5b9190612d87565b60405180910390a3610c6e848484610c78565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610cb7578082015181840152602081019050610c9c565b60008484015250505050565b6000601f19601f8301169050919050565b6000610cdf82610c7d565b610ce98185610c88565b9350610cf9818560208601610c99565b610d0281610cc3565b840191505092915050565b60006020820190508181036000830152610d278184610cd4565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d5f82610d34565b9050919050565b610d6f81610d54565b8114610d7a57600080fd5b50565b600081359050610d8c81610d66565b92915050565b6000819050919050565b610da581610d92565b8114610db057600080fd5b50565b600081359050610dc281610d9c565b92915050565b60008060408385031215610ddf57610dde610d2f565b5b6000610ded85828601610d7d565b9250506020610dfe85828601610db3565b9150509250929050565b60008115159050919050565b610e1d81610e08565b82525050565b6000602082019050610e386000830184610e14565b92915050565b610e4781610d92565b82525050565b6000602082019050610e626000830184610e3e565b92915050565b600080600060608486031215610e8157610e80610d2f565b5b6000610e8f86828701610d7d565b9350506020610ea086828701610d7d565b9250506040610eb186828701610db3565b9150509250925092565b600060ff82169050919050565b610ed181610ebb565b82525050565b6000602082019050610eec6000830184610ec8565b92915050565b610efb81610d54565b82525050565b6000602082019050610f166000830184610ef2565b92915050565b600060208284031215610f3257610f31610d2f565b5b6000610f4084828501610d7d565b91505092915050565b60008060408385031215610f6057610f5f610d2f565b5b6000610f6e85828601610d7d565b9250506020610f7f85828601610d7d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610fd057607f821691505b602082108103610fe357610fe2610f89565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000611045602883610c88565b915061105082610fe9565b604082019050919050565b6000602082019050818103600083015261107481611038565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006110b1602083610c88565b91506110bc8261107b565b602082019050919050565b600060208201905081810360008301526110e0816110a4565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611143602483610c88565b915061114e826110e7565b604082019050919050565b6000602082019050818103600083015261117281611136565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006111d5602283610c88565b91506111e082611179565b604082019050919050565b60006020820190508181036000830152611204816111c8565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611267602583610c88565b91506112728261120b565b604082019050919050565b600060208201905081810360008301526112968161125a565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006112f9602383610c88565b91506113048261129d565b604082019050919050565b60006020820190508181036000830152611328816112ec565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061138b602683610c88565b91506113968261132f565b604082019050919050565b600060208201905081810360008301526113ba8161137e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006113fb82610d92565b915061140683610d92565b925082820190508082111561141e5761141d6113c1565b5b92915050565b61142d81610d92565b82525050565b60006020820190506114486000830184611424565b92915050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b60006114aa602883610c88565b91506114b58261144e565b604082019050919050565b600060208201905081810360008301526114d98161149d565b9050919050565b50505050565b60006114f182610d92565b91506114fc83610d92565b925082820390508181111561151457611513611424565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611576602583610c88565b91506115818261151a565b604082019050919050565b600060208201905081810360008301526115a581611569565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611608602683610c88565b9150611613826115ac565b604082019050919050565b60006020820190508181036000830152611637816115fb565b9050919050565b61164781610d92565b82525050565b60006020820190506116626000830184610e3e565b92915050565b600061167382610d92565b915061167e83610d92565b925082820390508181111561169657611695611424565b5b92915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006116d2601f83610c88565b91506116dd8261169c565b602082019050919050565b60006020820190508181036000830152611701816116c5565b9050919050565b600061171382610d92565b915061171e83610d92565b9250828203905081811115611736576117356113c1565b5b92915050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611798602183610c88565b91506117a38261173c565b604082019050919050565b600060208201905081810360008301526117c78161178b565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b600061182a602283610c88565b9150611835826117ce565b604082019050919050565b600060208201905081810360008301526118598161181d565b9050919050565fea2646970667358221220c4f6c4b5a4c3b2a1a0a9a8a7a6a5a4a3a2a1a0a9a8a7a6a5a4a3a2a1a0a9a8a764736f6c63430008130033";
        
        const abi = [
            {
                "inputs": [
                    {"internalType": "string", "name": "_documentHash", "type": "string"},
                    {"internalType": "string", "name": "_ipfsHash", "type": "string"},
                    {"internalType": "string", "name": "_encryptionKey", "type": "string"},
                    {"internalType": "address", "name": "_owner", "type": "address"}
                ],
                "name": "storeDocument",
                "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [{"internalType": "uint256", "name": "_documentId", "type": "uint256"}],
                "name": "getDocument",
                "outputs": [
                    {"internalType": "string", "name": "documentHash", "type": "string"},
                    {"internalType": "string", "name": "ipfsHash", "type": "string"},
                    {"internalType": "string", "name": "encryptionKey", "type": "string"},
                    {"internalType": "address", "name": "owner", "type": "address"},
                    {"internalType": "uint256", "name": "timestamp", "type": "uint256"}
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ];
        
        console.log('📦 Creating contract factory...');
        const contractFactory = new ethers.ContractFactory(abi, bytecode, wallet);
        
        console.log('🚀 Deploying contract...');
        const contract = await contractFactory.deploy({
            gasLimit: 3000000
        });
        
        console.log(`⏳ Waiting for deployment transaction: ${contract.deploymentTransaction().hash}`);
        await contract.waitForDeployment();
        
        const contractAddress = await contract.getAddress();
        
        console.log('\n✅ Contract deployed successfully!');
        console.log(`   Contract Address: ${contractAddress}`);
        console.log(`   Transaction Hash: ${contract.deploymentTransaction().hash}`);
        
        // Save deployment info
        const deploymentInfo = {
            contractAddress,
            transactionHash: contract.deploymentTransaction().hash,
            deployedAt: new Date().toISOString(),
            network: 'amoy',
            deployer: wallet.address
        };
        
        fs.writeFileSync(
            'deployment.json',
            JSON.stringify(deploymentInfo, null, 2)
        );
        
        console.log('\n📄 Deployment info saved to deployment.json');
        console.log('\n🔧 Next steps:');
        console.log('   1. Update your .env file with:');
        console.log(`      DOCUMENT_CONTRACT_ADDRESS=${contractAddress}`);
        console.log('   2. Test the contract functions');
        console.log(`   3. View on explorer: https://amoy.polygonscan.com/address/${contractAddress}`);
        
        return contractAddress;
        
    } catch (error) {
        console.error('❌ Deployment failed:', error.message);
        throw error;
    }
}

// Run deployment
deployContract()
    .then((address) => {
        console.log(`\n🎉 Deployment completed! Contract address: ${address}`);
        process.exit(0);
    })
    .catch((error) => {
        console.error('Deployment failed:', error);
        process.exit(1);
    });
